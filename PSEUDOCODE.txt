PSEUDOCODE
#include "shell.h"

/**
 *main - entry point
 *@argc: argument count
 *@argv: argument vector
 *Return: On success number
 */
int main(int argc, char **argv)
{
/*
initialize variables
check if number of arguments is 2
assume the second argument is a file
try to open file
if second argument is not a file
catch and display error
if second argument is a file, launch file manipulation functions
*/
int file;

if (argc == 2)
{
file = open(argv[1], O_RDONLY);
if (file == -1)
{
if (errno == EACCESS)
exit(126);
else if (errno == ENOENT)
{
print_error(argv[1]);
exit(127);
}
}
}
shell();
return (0);
}


/**
 *shell - main simple shell interactive
 *Return: On success interaction
 */
int shell(void)
{
/*
initialize variables
write prompt
getline arguments
split input
parse inputs to function
free memory
*/
return (0);
}

/**
 *exit_shell - function to exit shell
 *@args: array of strings to check
 */
void exit_shell(char **args)
{
int stat, i = 1;

if (*args[i] == NULL)
exit(EXIT_SUCCESS);

if (*args[i])
{
stat = _atoi(*args[i]);
if (stat == -1)
{
print_error("Illegal argument: ");
_puts(*args[0]);
_putchar('\n');
return
}
}
}

/**
 *_cd - duplicate of inbuilt function cd
 *@args: arguments to check
 *Return: On success change directory
 */
void _cd(char **args)
{
char *dir, buffer[MAX_ARGS];

dir = getcwd(buffer, 1024);

if (args[1] == NULL)
{
if (chdir(_getenv("HOME=")) == -1)
chdir(_getenv("PWD="));
}
if (_strcmp(args[1], "-") == 0)
{
if (chdir(_getenv("OLDPWD=")) == -1)
chdir(_getenv("PWD="));
}
if (chdir(args[1]) == -1)
{
print_error(args[1]);
}
_setenv("OLDPWD", _getenv("PWD="));
_setenv("PWD", dir);
}

/**
 *_set - precursor to _setenv
 *@args: arguments to check
 *Return: On success new env variable
 */
 void _set(char **args)
{
if (args[2] == NULL)
{
_puts("");
return;
}
else
{
_setenv(args[1],argv[2])
}
}

/**
 *_unset - precursor to _unsetenv
 *@args: arguments to check
 *Return: On success NULL
 */
void _unset(char **args)
{
int i;

if (args[1] == NULL)
{
_puts("");
return;
}
else
{
for (i = 1; args[i] != NULL; i++)
_unsetenv(args[i]);
}
return;
}


/**
 *_getenv - duplicate of getenv inbuilt function
 *@name: string to check
 *Return: On success string
 */
char *_getenv(char *name)
{
int i;
int len = _strlen(name);

for (i = 0; environ[i] != NULL; i++)
{
if (_strncmp(environ[i], name, len) == 0 && environ[i][len] == '=')
{
return (environ[i] + len + 1);
}
}
return;
}

/**
 *_unsetenv - duplicate of unsetenv inbuilt function
 *@name: string to check
 *Return: On success flag
 */
int _unsetenv(char *name)
{
int i, j;
int len = _strlen(name);

for (i = 0; environ[i] != NULL; i++)
{
if (strncmp(environ[i], name, len) == 0 && environ[i][len] == '=')
{
for (j = i; environ[j] != NULL; j++)
environ[j] = environ[j + 1];
return (0);
}
}
return (-1);
}

/**
 *_setenv - duplicate of setenv inbuilt function
 *@name: string to check
 *@value: string to check
 *Return: On success flag
 */
int _setenv(char *name, char *value)
{
int i, nlen = _strlen(name), vlen = _strlen(value);
int env_size = 0, entry_len;
char *new_entry, **new_environ;

while (environ[env_size] != NULL)
env_size++;

for (i = 0; environ[i] != NULL; i++)
{
if (strncmp(environ[i], name, nlen) == 0 && environ[i][nlen] == '=')
{
entry_len = nlen + vlen + 2;
new_entry = (char *)malloc(entry_len);
if (new_entry == NULL)
return (-1);
_memcpy(new_entry, name, nlen);
new_entry[nlen] = '=';
_memcpy(new_entry, nlen + 1, value, vlen);
new_entry[entry_len - 1] = '\0';
environ[i] = new_entry;
return (0);
}
}

entry_len = nlen + vlen + 2;
new_entry = (char *)malloc(entry_len);
if (new_entry == NULL)
return (-1);
memcpy(new_entry, name, nlen);
new_entry[nlen] = '=';
memcpy(new_entry + nlen + 1, value, vlen);
new_entry[entry_len - 1] = '\0';

new_environ = (char **)malloc((env_size + 2) * sizeof(char *));
if (new_environ == NULL)
{
free(new_entry);
return (-1);
}

for (i = 0; environ[i] != NULL; i++)
new_environ[i] = environ[i];

new_environ[env_size] = new_entry;
new_environ[env_size + 1] = NULL;

environ = new_environ;

return (0);
}