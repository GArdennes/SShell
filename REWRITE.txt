REWRITE
1. lookup the functions that were called
2. delete the unnecessary functions
3. copy and paste the functions into files
4. compile and run
5. update with runchecker code
6. test to confirm the unnecessary functions

7. consider the order in the file ANOTHER FUNCTION
8. choose to rename functions accordingly
9. compile to detect errors
10. troubleshoot
11. test code
12. test on runchecker code

#ifndef _SHELL_H_
#define _SHELL_H_

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <limits.h>
#include <fcntl.h>
#include <errno.h>

/* for read/write buffers */
#define MAX_ARGS 1024
#define BUF_FLUSH -1

extern char **environ;


/**
 * struct liststr - singly linked list
 * @num: the number field
 * @str: a string
 * @next: points to the next node
 */
typedef struct liststr
{
	int num;
	char *str;
	struct liststr *next;
} list_t;


typedef struct passinfo
{
	char *arg;
	char **argv;
	char *path;
	int argc;
	unsigned int line_count;
	int err_num;
	int linecount_flag;
	char *fname;
	list_t *env;
	list_t *history;
	list_t *alias;
	char **environ;
	int env_changed;
	int status;

	char **cmd_buf; /* pointer to cmd ; chain buffer, for memory mangement */
	int cmd_buf_type; /* CMD_type ||, &&, ; */
	int readfd;
	int histcount;
} info_t;

#define INFO_INIT \
{NULL, NULL, NULL, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, \
	0, 0, 0}

+1--int hsh(info_t *, char **);
+1--void find_cmd(info_t *);
+1--void fork_cmd(info_t *);
+1--int is_cmd(info_t *, char *);
+1--char *dup_chars(char *, int, int);
+1--char *find_path(info_t *, char *, char *);
+1--void _eputs(char *);
+1--int _eputchar(char);
+1--int _strlen(char *);
+1--char *starts_with(const char *, const char *);
+1--char *_strcat(char *, char *);
+1--char *_strcpy(char *, char *);
+1--char *_strdup(const char *);
+1--void _puts(char *);
+1--int _putchar(char);
+1--char **strtow(char *, char *);
+1--char *_memset(char *, char, unsigned int);
+1--void ffree(char **);
+1--int bfree(void **);
+1--int interactive(info_t *);
+1--int is_delim(char, char *);
+1--void print_error(info_t *, char *);
+1--int print_d(int, int);
+1--ssize_t input_buf(info_t *info, char **buf, size_t *len)
+1--ssize_t get_input(info_t *);
+1--void sigintHandler(int);
+1--void clear_info(info_t *);
+1--void set_info(info_t *, char **);
+1--void free_info(info_t *, int);
+1--char *_getenv(info_t *, const char *);
+1--int populate_env_list(info_t *);
+1--char **get_environ(info_t *);
+1--list_t *add_node(list_t **, const char *, int);
+1--list_t *add_node_end(list_t **, const char *, int);
+1--void free_list(list_t **);
+1--size_t list_len(const list_t *);
+1--char **list_to_strings(list_t *);

#endif